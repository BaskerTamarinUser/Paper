theory SKUP

begin

builtins: hashing


functions: KDF/1

//long-term keys are registered

rule register_longterm_keys:

[Fr(~Ki),Fr(~GK)]--[]->[!PS($ECUi,$GECU,~Ki),!GS($ECUi,$GECU,~GK)]




//ECU and GECU are initialised by binding with long-term keys

rule initialise_ECUi:

[Fr(~id), Fr(~AK), !PS(ECUi,GECU,Ki),!GS(ECUi,GECU,GK)]

--[Create(ECUi, ~id), Send(<ECUi,~AK>),
Role('ECUi') ]->

[St_ECUi_1(ECUi, ~id, Ki, GK, GECU,~AK),Out(~AK)]

rule initialise_GECU:

[In(AK),Fr(~id),!PS(ECUi,GECU,Ki),!GS(ECUi,GECU,GK)]
--[Create(GECU, ~id),Receive(<GECU,AK>),
 Role('GECU') ]->
[St_GECU_1(GECU, ~id, Ki, GK, ECUi,AK)]





rule send_4:
let
    EK11=h(<~seedK1,GK>)   
    AK11=h(<~seedK1,GK>)
    MAC3=h(<AK,GECU,~seedK1,GK>)
in
[Fr(~seedK1),!GS(ECUi,GECU,GK),!GS(ECUi,GECU,Ki), St_GECU_1(GECU, ~id, Ki, GK, ECUi,AK)]
--[Send(<GECU,~seedK1>),
 Honest(GECU),
 Honest(ECUi),
 Role('GECU'),
Secret(GECU,EK11,AK11),Running_strongB(~seedK1)]->
[St_GECU_2(GECU, ~id, Ki, GK, ECUi,AK,~seedK1,EK11,AK11), Out(<~seedK1,MAC3>)]


rule Recv_4:
let
    EK11=h(<seedK1,GK>)   
    AK11=h(<seedK1,GK>)
    MAC3=h(<AK11,GECU,seedK1,GK>)
in
[In(<seedK1,MAC3>),!GS(ECUi,GECU,GK),!GS(ECUi,GECU,Ki), St_ECUi_1(ECUi, ~id, Ki, GK, GECU,AK)]
--[Receive(<GECU,seedK1>),
 Honest(GECU),
 Honest(ECUi),
 Role('ECUi')
,Running_strongA(seedK1)]->
[St_ECUi_2(ECUi, ~id, Ki, GK, GECU,AK,seedK1)]

rule send_5:
let
    EK11=h(<seedK1,GK>)   
    AK11=h(<seedK1,GK>)
    MAC4=h(<ECUi,EK11,AK11,Ki>)
in

[!GS(ECUi,GECU,GK),!GS(ECUi,GECU,Ki), St_ECUi_3(ECUi, ~id, Ki, GK, GECU,AK,seedK1)]
--[Send(<ECUi,MAC4>),
 Honest(GECU),
 Honest(ECUi),
 Role('ECUi'),
Secret(ECUi,EK11,AK11),Commit_strongA(seedK1)]->
[St_ECUi_4(ECUi, ~id, Ki, GK, GECU,AK,seedK1,EK11,AK11),Out(<ECUi,MAC4>)]


rule Recv_5:
let
    MAC4=h(<ECUi,EK11,AK11,Ki>)
in

[In(<ECUi,MAC4>),!GS(ECUi,GECU,GK),!GS(ECUi,GECU,Ki), St_GECU_2(GECU, ~id, Ki, GK, ECUi,AK,seedK1,EK11,AK11)]
--[Receive(<ECUi,MAC4>),
 Honest(GECU),
 Honest(ECUi),
 Role('GECU'),
Secret(GECU,EK11,AK11),Commit_strongB(seedK1)]->
[St_GECU_3(GECU, ~id, Ki, GK, ECUi,AK,seedK1,EK11,AK11)]


rule KKS:
let
EK1=h(<~seed2,GK>)   
AK1=h(<~seed2,GK>)
in
[Fr(~seed2),!GS(ECUi,GECU,GK)]
--[Reveal(ECUi)]->
[Out(<EK1,AK1>)]







//	SECURITY PROPERTIES


lemma executable:
exists-trace
"Ex GECU ECUi  m #i #j. Send(<GECU,m>)@i & Receive(<ECUi,m>) @ j"

lemma Injectiveagreement_ECUi:

    " (All Ri #i .
        Commit_strongA(Ri)@ #i
        ==>
        (Ex #j . Running_strongA(Ri) @ #j & #j < #i) &
        (not (Ex #j . Commit_strongA(Ri) @ #j & not (#i = #j)))
    )"




lemma Injectiveagreement_GECU:
all-traces
    " (All Ri #i .
        Commit_strongB(Ri)@ #i
        ==>
        (Ex #j . Running_strongB(Ri) @ #j & #j < #i) &
        (not (Ex #j . Commit_strongB(Ri) @ #j & not (#i = #j)))
    )"







lemma ECUi_secrecy:
all-traces

  " 
All ECUi EK11 AK11 #i.
        Secret(ECUi,EK11,AK11) @ i  ==> not( Ex ECUi #j. Honest(ECUi) @j &
        
       Ex EK11 AK11 #r.K(<EK11,AK11>)@r)"



lemma GECU_secrecy:
all-traces

  " 
All GECU EK11 AK11 #i.
         Secret(GECU,EK11,AK11) @ i  ==> not( Ex GECU #j. Honest(GECU) @j &
        
      Ex EK11 AK11 #r.K(<EK11,AK11>)@r)"


lemma KKS:
exists-trace
"  (Ex EK11 AK11 #j.K(<EK11,AK11>)@j  & Ex ECUi #n. Reveal(ECUi) @ n & #j=#n )<=> F  "
/*
lemma KKS:
   all-traces
" 
  not( Ex EK AK #j.K(<EK,AK>)@j &(#j=#n))==> not (All GECU ECUi EK AK #n. Reveal(GECU) @ n &  Reveal(ECUi) @ n & Secret(ECUi,EK,AK) @ n)not"*/

end





